
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<html><head>
  <title>File: XML_ja</title>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
  <link rel=StyleSheet href="../.././rdoc-style.css" type="text/css" media="screen" />
  <script type="text/javascript" language="JavaScript">
  <!--
  function popCode(url) {
    window.open(url, "Code", 
          "resizable=yes,scrollbars=yes,toolbar=no,status=no,height=150,width=400")
  }
  //-->
  </script>
</head>

<body bgcolor="white">
<table summary="Information on file" width="100%">
 <tr class="title-row">
 <td><table summary="layout" width="100%"><tr>
   <td class="big-title-font" colspan="2">XML_ja</td>
   <td align="right"><table summary="layout" cellspacing="0" cellpadding="2">
         <tr>
           <td  class="small-title-font">Path:</td>
           <td class="small-title-font">docs/XML_ja</td>
         </tr>
         <tr>
           <td class="small-title-font">Modified:</td>
           <td class="small-title-font">Wed Nov 06 16:54:25 JST 2002</td>
         </tr>
        </table>
    </td></tr></table></td>
  </tr>
</table>
  <!-- banner header -->



<div class="description"><h1>amrita と XML</h1>
<h2>概要</h2>
<p>
amritaはHTMLと同様、XMLに対しても使用することができます。
</p>
<ul>
<li>amritaは <a href="../../classes/REXML.html">REXML</a> ベースの XML
パーサーを持っています

</li>
<li>amritaは HTMLと同様にXHTML文書を作成することができます

<p>
XHTMLのテンプレートを用意すれば、XHTML文書を作成します
</p>
</li>
<li>amritaはXML文書をテンプレートとしてXML文書を作成するために使用することができます

<p>
amrita には HTMLのDTD(タグの構造)に依存したコードはわずかしかありません。
また、それらをOFFにすることが容易にできます。
ですから、XHTML以外の一般のXML文書をテンプレートとして使用することができます。
</p>
</li>
<li>amritaはモデルデータをXMLドキュメントから取得することができます

<p>
<a
href="../../classes/REXML.html">REXML</a>はRubyのための自然なAPIを提供しています。
そして、<a
href="../../classes/REXML.html">REXML</a>で読みこんだXML文書をモデルデータとして使用することが容易にできます。
</p>
</li>
<li>amx: XML用のもうひとつのスタイルシート

<p>
<a href="Tour2.html">docs/Tour2</a> を参照してください。
</p>
</li>
</ul>
<hr size="1"></hr><h2>XHTML文書</h2>
<h3>コードと出力</h3>
<p>
コード:
</p>
<pre>
  require &quot;amrita/template&quot;
  include Amrita

  tmpl_text = &lt;&lt;-END
  &lt;?xml version=&quot;1.0&quot;?&gt;
  &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;
    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
  &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
  &lt;head&gt;
      &lt;title&gt;xhtml sample&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1 id=title&gt;title&lt;/h1&gt;
    &lt;p id=body&gt;body text&lt;/p&gt;
    &lt;hr /&gt;
  &lt;/body&gt;
  &lt;/html&gt;
     END
</pre>
<pre>
  data = {
      :title =&gt; &quot;SAMPLE1&quot;,
      :body =&gt; &quot;members of this HASH will be inserted here and title&quot;
  }

  tmpl = TemplateText.new tmpl_text
  tmpl.prettyprint = true
   tmpl.xml = true # use REXML parser
  tmpl.asxml = true
  tmpl.expand(STDOUT, data)
</pre>
<p>
出力:
</p>
<pre>
   &lt;?xml version=&quot;1.0&quot;?&gt;
   &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;
       &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
   &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
     &lt;head&gt;
       &lt;title&gt;xhtml sample&lt;/title&gt;
     &lt;/head&gt;
     &lt;body&gt;
       &lt;h1&gt;SAMPLE1&lt;/h1&gt;
       &lt;p&gt;members of this HASH will be inserted here and title&lt;/p&gt;
       &lt;hr /&gt;
     &lt;/body&gt;
   &lt;/html&gt;
</pre>
<h3>説明</h3>
<p>
基本的に、amrita は
XHTMLテンプレートからはXHTML文書、HTML4.0テンプレートからHTML4.0文書を作成します。
よって、プログラマーは特定の標準やブラウザ、デバイスに対する適合性をいちいち気にする必要がありません。
それは、デザイナー(テンプレートを書く人)の仕事になります。
</p>
<p>
プログラマーがすることは Template オブジェクト <tt>asxml</tt>
フラグを設定することだけです。 これが <tt>true</tt> に設定されていると、
<tt>&lt;hr&gt;</tt> のような単独のタグは <tt>&lt;hr /&gt;</tt>
のようにXMLの形式で出力されます。
</p>
<hr size="1"></hr><h2>XML テンプレート</h2>
<h3>コードと出力</h3>
<p>
コード:
</p>
<pre>
   data = {
      :table1=&gt;[
         { :name=&gt;&quot;Ruby In A Nutshell&quot;, :author=&gt;&quot;Yukihiro Matsumoto, David L. Reynolds&quot;, :isbn=&gt;&quot;0596002149&quot; }
         { :name=&gt;&quot;Programming Ruby&quot;, :author=&gt;&quot;David Thomas, Andrew Hunt&quot;, :isbn=&gt;&quot;0201710897&quot; },
         { :name=&gt;&quot;The Ruby Way&quot;, :author=&gt;&quot;Hal Fulton&quot;, :isbn=&gt;&quot;0672320835&quot; },
      ]
   }

   xml_tmpl = TemplateText.new &lt;&lt;END
   &lt;booklist&gt;
     &lt;book id=&quot;table1&quot;&gt;
        &lt;title id=&quot;name&quot; /&gt;
        &lt;author id=&quot;author&quot; /&gt;
        &lt;isbn id=&quot;isbn&quot; /&gt;
     &lt;/book&gt;
   &lt;/booklist&gt;
   END
</pre>
<pre>
   xml_tmpl.xml = true # use REXML-based parser
   puts &quot;------------XML output ----------------------&quot;
   xml_tmpl.expand(STDOUT, data)
</pre>
<p>
出力:
</p>
<pre>
   &lt;booklist&gt;
     &lt;book&gt;
       &lt;title&gt;Ruby In A Nutshell&lt;/title&gt;
       &lt;author&gt;Yukihiro Matsumoto, David L. Reynolds&lt;/author&gt;
       &lt;isbn&gt;0596002149&lt;/isbn&gt;
     &lt;/book&gt;&lt;book&gt;
       &lt;title&gt;Programming Ruby&lt;/title&gt;
       &lt;author&gt;David Thomas, Andrew Hunt&lt;/author&gt;
       ..........
</pre>
<h3>説明</h3>
<pre>
   xml_tmpl.xml = true # REXMLベースのパーサーを使用する
   puts &quot;------------XML output ----------------------&quot;
   xml_tmpl.expand(STDOUT, data)
</pre>
<p>
amritaは必要があるまでテンプレートをロードしません。 最初に <tt>expand</tt>
が呼ばれる時に <tt>xml</tt> フラグが設定されていると、 amritaは <a
href="../../classes/REXML.html">REXML</a>ベースのパーサーを使用します。
</p>
<p>
amritaでは、ひとつのモデルデータを複数のテンプレートに適用することもできます。
従って、一種類のコードでXMLとHTMLを両方出力することもできます。 詳しくは
sample/tour/xml1.rb を参照してください。
</p>
<hr size="1"></hr><h2>XML文書をモデルデータとして使用する</h2>
<pre>
  XML文書(データ) + HTMLテンプレート ==&gt; HTML文書
</pre>
<p>
つまり、一種のスタイルシートとしてamritaを利用する方法です。
</p>
<h3>code and output</h3>
<p>
code:
</p>
<pre>
  require &quot;amrita/template&quot;
  require &quot;rexml/document&quot;
  include Amrita

  doc = REXML::Document.new &lt;&lt;END
  &lt;booklist&gt;
    &lt;book isbn=&quot;0596002149&quot;&gt;
       &lt;title&gt;Ruby In A Nutshell&lt;/title&gt;
       &lt;author&gt;Yukihiro Matsumoto&lt;/author&gt;
       &lt;author&gt;David L. Reynolds&lt;/author&gt;
    &lt;/book&gt;
    &lt;book isbn=&quot;0201710897&quot;&gt;
       &lt;title&gt;Programming Ruby&lt;/title&gt;
       &lt;author&gt;David Thomas&lt;/author&gt;
       &lt;author&gt;Andrew Hunt&lt;/author&gt;
    &lt;/book&gt;
    &lt;book isbn=&quot;0672320835&quot;&gt;
       &lt;title&gt;The Ruby Way&lt;/title&gt;
       &lt;author&gt;Hal Fulton&lt;/author&gt;
    &lt;/book&gt;
  &lt;/booklist&gt;
  END
</pre>
<pre>
  table = doc.elements.to_a(&quot;booklist/book&quot;).collect do |book|
    {
      :title=&gt;book.elements['title'],
      :authors=&gt;book.elements.to_a('author').collect do |a|
        { :name=&gt;a }
      end,
      #:isbn=&gt;book.attributes['isbn']
      :isbn=&gt;e(:a, :href=&gt;&quot;http://www.amazon.com/exec/obidos/ASIN/#{book.attributes['isbn']}&quot;) {
        book.attributes['isbn']
      }
    }
  end

  data = { :table1=&gt;table }
</pre>
<pre>
  html_tmpl = TemplateText.new &lt;&lt;END
  &lt;table border=&quot;1&quot;&gt;
    &lt;tr&gt;&lt;th&gt;title&lt;/th&gt;&lt;th&gt;author&lt;/th&gt;&lt;th&gt;ISBN&lt;/th&gt;&lt;/tr&gt;
    &lt;tr id=table1&gt;
      &lt;td id=&quot;title&quot;&gt;
      &lt;td&gt;&lt;span id=&quot;authors&quot;&gt;&lt;span id=&quot;name&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;
      &lt;td id=&quot;isbn&quot;&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
  END

  html_tmpl.prettyprint = true
  html_tmpl.set_hint(HtmlCompiler::AnyData.new)
  html_tmpl.expand(STDOUT, data)
</pre>
<p>
output:
</p>
<pre>
   &lt;table border=&quot;1&quot;&gt;
     &lt;tr&gt;
     &lt;th&gt;title&lt;/th&gt;
     &lt;th&gt;author&lt;/th&gt;
     &lt;th&gt;ISBN&lt;/th&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
     &lt;td&gt;Ruby In A Nutshell&lt;/td&gt;
     &lt;td&gt;Yukihiro Matsumoto&lt;br&gt;David L. Reynolds
     &lt;br&gt;
     &lt;/td&gt;
     &lt;td&gt;&lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0596002149&quot;&gt;0596002149&lt;/a&gt;&lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
     &lt;td&gt;Programming Ruby&lt;/td&gt;
     &lt;td&gt;David Thomas&lt;br&gt;Andrew Hunt
     &lt;br&gt;
     &lt;/td&gt;
     &lt;td&gt;&lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0201710897&quot;&gt;0201710897&lt;/a&gt;&lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
     &lt;td&gt;The Ruby Way&lt;/td&gt;
     &lt;td&gt;Hal Fulton&lt;br&gt;
     &lt;/td&gt;
     &lt;td&gt;&lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0672320835&quot;&gt;0672320835&lt;/a&gt;&lt;/td&gt;
     &lt;/tr&gt;
   &lt;/table&gt;
</pre>
<h3>description</h3>
<pre>
   table = doc.elements.to_a(&quot;booklist/book&quot;).collect do |book|
     {
       :xxx=&gt;.....
     }
   end
</pre>
<p>
このコードは、<tt>&lt;book&gt;</tt>要素から含むHashの配列を生成します。
<tt>&lt;book&gt;</tt>要素は<a
href="../../classes/REXML/Element.html">REXML::Element</a>クラスのインスタンスです。
ですから、<a
href="../../classes/REXML.html">REXML</a>のAPIによって、下位ノードや属性値を取り出すことができます。
</p>
<pre>
       :title=&gt;book.elements['title'],
</pre>
<p>
<tt>book.elements['title']</tt>は、<tt>&lt;book&gt;</tt> 要素が持つ最初の
<tt>&lt;title&gt;</tt> 要素です。
</p>
<pre>
       :authors=&gt;book.elements.to_a('author').collect do |a|
         { :name=&gt;a }
       end,
</pre>
<p>
一冊の本にはタイトルは一つしかありませんが、著者は複数いる場合があります。
従って、著者(author)は <tt>to_a</tt>によって<a
href="../../classes/Array.html">Array</a>として処理します。 Ruby
の標準メソッドである、<tt>collect</tt>を使用してHashの配列を作成しています。
</p>
<pre>
       :isbn=&gt;e(:a, :href=&gt;&quot;http://www.amazon.com/exec/obidos/ASIN/#{book.attributes['isbn']}&quot;) {
         book.attributes['isbn']
       }
</pre>
<p>
この例では、アマゾンへの直接リンクを貼ろうとしています。 e(...) { ... }
は次のようなタグを生成します。
</p>
<pre>
    &lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0596002149&quot;&gt;0596002149&lt;/a&gt;
</pre>
<p>
このアイディア(amritaベースのXMLスタイルシート)をさらに発展させた例が
sample/tour/xml3.rbにあります。そして、これは amx
という機能としてまとめられています。 詳細は <a
href="Tour2.html">docs/Tour2</a> を参照してください。
</p>
<hr size="1"></hr><h2>Ruby のオブジェクトをXMLの項目に変換する</h2>
<p>
RubyのオブジェクトをXMLに対応させようとすると、
属性に対応するメンバーと下位要素に対応するメンバーがあると思います。
</p>
<p>
このサンプルは、<tt>ls -l</tt>のような情報をXMLとして提供する例です。
</p>
<h3>コードと出力</h3>
<p>
コード:
</p>
<pre>
   amrita can use an existing class for model data.
   To show this ability, this sample uses Ruby's system class
   File::Stat.

  require &quot;amrita/template&quot;
  include Amrita
</pre>
<pre>
  class File
    class Stat
      include Amrita::ExpandByMember

      def entry(name)
        a(:name=&gt;name, :type=&gt;ftype) { self }
      end
</pre>
<pre>
      def size_or_nil
        size if ftype == &quot;file&quot;
      end

      def mode_str
        ret = &quot;-rwxrwxrwx&quot;
        /(.*)(.)(.)(.)(.)(.)(.)(.)(.)(.)$/ =~ sprintf(&quot;%b&quot;,mode)
        $~[2..10].each_with_index do |b,n|
          ret[n+1] = &quot;-&quot; if b != &quot;1&quot;
        end
        ret[0] = &quot;d&quot; if $~[1] == &quot;100000&quot;
        ret
      end
</pre>
<pre>
      def unix_inf
        a(:dev=&gt;dev, :uid=&gt;uid, :gid=&gt;gid) { self }
      end
    end
  end

  tmpl = TemplateText.new &lt;&lt;END
    &lt;file id=&quot;filelist&quot;&gt;
       &lt;size id=&quot;size_or_nil&quot; /&gt;
       &lt;mode id=&quot;mode_str&quot; /&gt;
       &lt;times&gt;
         &lt;ctime id=&quot;mtime&quot; /&gt;
         &lt;mtime id=&quot;mtime&quot; /&gt;
         &lt;atime id=&quot;atime&quot; /&gt;
       &lt;/times&gt;
       &lt;unix_inf id=&quot;unix_inf&quot;&gt;
          &lt;inode id=&quot;ino&quot; /&gt;
       &lt;/unix_inf&gt;
    &lt;/file&gt;
  END
</pre>
<pre>
  dir = ARGV.shift || '*'

  filelist = Dir[dir].collect do |f|
    File::stat(f).entry(f)
  end
</pre>
<pre>
  data = { :filelist=&gt;filelist }
  tmpl.xml = true
  tmpl.expand(STDOUT, data)
</pre>
<p>
出力:
</p>
<pre>
  &lt;file name=&quot;CVS&quot; type=&quot;directory&quot;&gt;
     &lt;mode&gt;drwxr-xr-x&lt;/mode&gt;
     &lt;times&gt;
       &lt;ctime&gt;Tue Sep 03 11:07:10 JST 2002&lt;/ctime&gt;
       &lt;mtime&gt;Tue Sep 03 11:07:10 JST 2002&lt;/mtime&gt;
       &lt;atime&gt;Thu Sep 05 07:30:39 JST 2002&lt;/atime&gt;
     &lt;/times&gt;
     &lt;unix_inf uid=&quot;1000&quot; gid=&quot;1000&quot; dev=&quot;770&quot;&gt;
        &lt;inode&gt;652250&lt;/inode&gt;
     &lt;/unix_inf&gt;
  &lt;/file&gt;
  &lt;file name=&quot;precompile.rb&quot; type=&quot;file&quot;&gt;
     &lt;size&gt;2596&lt;/size&gt;
     &lt;mode&gt;-rw-r--r--&lt;/mode&gt;
     &lt;times&gt;
       &lt;ctime&gt;Mon Aug 26 09:12:11 JST 2002&lt;/ctime&gt;
       &lt;mtime&gt;Mon Aug 26 09:12:11 JST 2002&lt;/mtime&gt;
       &lt;atime&gt;Thu Sep 05 09:26:48 JST 2002&lt;/atime&gt;
     &lt;/times&gt;
     &lt;unix_inf uid=&quot;1000&quot; gid=&quot;1000&quot; dev=&quot;770&quot;&gt;
        &lt;inode&gt;310411&lt;/inode&gt;
     &lt;/unix_inf&gt;
  &lt;/file&gt;
  &lt;file name=&quot;amstest.ams&quot; type=&quot;file&quot;&gt;
  .....
</pre>
<h3>説明</h3>
<pre>
    def entry(name)
      a(:name=&gt;name, :type=&gt;ftype) { self }
    end
</pre>
<p>
このメソッドはAttrArrayオブジェクトを生成し、
一部の属性値を設定してから下位要素を自分自身で展開します。
</p>
<pre>
    def size_or_nil
      size if ftype == &quot;file&quot;
    end
</pre>
<p>
もしファイルが通常ファイルでないと、
このメソッドはnilを返し、<tt>&lt;size&gt;</tt> 要素は削除されます。
</p>
<hr size="1"></hr></div>







</body>